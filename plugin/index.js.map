{
  "version": 3,
  "sources": ["src/index.ts", "src/consts.ts", "src/exotic.ts", "src/import.ts", "src/ref.ts", "src/stylesheet.ts", "src/variants.ts"],
  "sourcesContent": ["import type { PluginItem } from '@babel/core'\n\nimport { isArrowFunctionExpression, isBlockStatement, isFunctionExpression, isIdentifier, isImportSpecifier, isObjectExpression, isObjectProperty, isReturnStatement } from '@babel/types'\nimport { NATIVE_COMPONENTS_PATHS, REACT_NATIVE_COMPONENT_NAMES, REPLACE_WITH_UNISTYLES_EXOTIC_PATHS, REPLACE_WITH_UNISTYLES_PATHS } from './consts'\nimport { handleExoticImport } from './exotic'\nimport { addUnistylesImport, isInsideNodeModules } from './import'\nimport { hasStringRef } from './ref'\nimport { addDependencies, addStyleSheetTag, getStylesDependenciesFromFunction, getStylesDependenciesFromObject, isKindOfStyleSheet, isUnistylesStyleSheet } from './stylesheet'\nimport type { UnistylesPluginPass } from './types'\nimport { extractVariants } from './variants'\n\nexport default function (): PluginItem {\n    return {\n        name: 'babel-react-native-unistyles',\n        visitor: {\n            Program: {\n                enter(_, state: UnistylesPluginPass) {\n                    state.file.replaceWithUnistyles = REPLACE_WITH_UNISTYLES_PATHS\n                        .concat(state.opts.autoProcessPaths ?? [])\n                        .some(path => state.filename?.includes(path))\n\n                    state.file.hasAnyUnistyle = false\n                    state.file.hasUnistylesImport = false\n                    state.file.hasVariants = false\n                    state.file.styleSheetLocalName = ''\n                    state.file.tagNumber = 0\n                    state.reactNativeImports = {}\n                    state.file.forceProcessing = state.opts.autoProcessRoot && state.filename\n                        ? state.filename.includes(`${state.file.opts.root}/${state.opts.autoProcessRoot}/`)\n                        : false\n                },\n                exit(path, state: UnistylesPluginPass) {\n                    if (isInsideNodeModules(state) && !state.file.replaceWithUnistyles) {\n                        return\n                    }\n\n                    if (state.file.hasAnyUnistyle || state.file.hasVariants || state.file.replaceWithUnistyles || state.file.forceProcessing) {\n                        addUnistylesImport(path, state)\n                    }\n                }\n            },\n            FunctionDeclaration(path, state: UnistylesPluginPass) {\n                if (isInsideNodeModules(state)) {\n                    return\n                }\n\n                const componentName = path.node.id\n                    ? path.node.id.name\n                    : null\n\n                if (componentName) {\n                    state.file.hasVariants = false\n                }\n            },\n            ClassDeclaration(path, state: UnistylesPluginPass) {\n                if (isInsideNodeModules(state)) {\n                    return\n                }\n\n                const componentName = path.node.id\n                    ? path.node.id.name\n                    : null\n\n                if (componentName) {\n                    state.file.hasVariants = false\n                }\n            },\n            VariableDeclaration(path, state: UnistylesPluginPass) {\n                if (isInsideNodeModules(state)) {\n                    return\n                }\n\n                path.node.declarations.forEach((declaration) => {\n                    if (isArrowFunctionExpression(declaration.init) || isFunctionExpression(declaration.init)) {\n                        const componentName = declaration.id && declaration.id.type === 'Identifier'\n                            ? declaration.id.name\n                            : null\n\n                        if (componentName) {\n                            state.file.hasVariants = false\n                        }\n                    }\n                })\n            },\n            ImportDeclaration(path, state: UnistylesPluginPass) {\n                const exoticImport = REPLACE_WITH_UNISTYLES_EXOTIC_PATHS\n                    .concat(state.opts.autoRemapImports ?? [])\n                    .find(exotic => state.filename?.includes(exotic.path))\n\n                if (exoticImport) {\n                    return handleExoticImport(path, state, exoticImport)\n                }\n\n                if (isInsideNodeModules(state) && !state.file.replaceWithUnistyles) {\n                    return\n                }\n\n                const importSource = path.node.source.value\n\n                if (importSource.includes('react-native-unistyles')) {\n                    state.file.hasUnistylesImport = true\n\n                    path.node.specifiers.forEach(specifier => {\n                        if (isImportSpecifier(specifier) && isIdentifier(specifier.imported) && specifier.imported.name === 'StyleSheet') {\n                            state.file.styleSheetLocalName = specifier.local.name\n                        }\n                    })\n                }\n\n                if (importSource === 'react-native') {\n                    path.node.specifiers.forEach(specifier => {\n                        if (isImportSpecifier(specifier) && isIdentifier(specifier.imported) && REACT_NATIVE_COMPONENT_NAMES.includes(specifier.imported.name)) {\n                            state.reactNativeImports[specifier.local.name] = specifier.imported.name\n                        }\n                    })\n                }\n\n                if (importSource.includes('react-native/Libraries')) {\n                    handleExoticImport(path, state, NATIVE_COMPONENTS_PATHS)\n                }\n\n                if (!state.file.forceProcessing && Array.isArray(state.opts.autoProcessImports)) {\n                    state.file.forceProcessing = state.opts.autoProcessImports.includes(importSource)\n                }\n            },\n            JSXElement(path, state: UnistylesPluginPass) {\n                if (isInsideNodeModules(state)) {\n                    return\n                }\n\n                if (hasStringRef(path)) {\n                    throw new Error(\"Detected string based ref which is not supported by Unistyles.\")\n                }\n            },\n            BlockStatement(path, state: UnistylesPluginPass) {\n                if (isInsideNodeModules(state)) {\n                    return\n                }\n\n                extractVariants(path, state)\n            },\n            CallExpression(path, state: UnistylesPluginPass) {\n                if (isInsideNodeModules(state)) {\n                    return\n                }\n\n                if (!isUnistylesStyleSheet(path, state) && !isKindOfStyleSheet(path, state)) {\n                    return\n                }\n\n                state.file.hasAnyUnistyle = true\n\n                addStyleSheetTag(path, state)\n\n                const arg = path.node.arguments[0]\n\n                // Object passed to StyleSheet.create (may contain variants)\n                if (isObjectExpression(arg)) {\n                    const detectedDependencies = getStylesDependenciesFromObject(path)\n\n                    if (detectedDependencies) {\n                        if (isObjectExpression(arg)) {\n                            arg.properties.forEach(property => {\n                                if (isObjectProperty(property) && isIdentifier(property.key) && detectedDependencies[property.key.name]) {\n                                    addDependencies(state, property.key.name, property, detectedDependencies[property.key.name])\n                                }\n                            })\n                        }\n                    }\n                }\n\n                // Function passed to StyleSheet.create (e.g., theme => ({ container: {} }))\n                if (isArrowFunctionExpression(arg) || isFunctionExpression(arg)) {\n                    const detectedDependencies = getStylesDependenciesFromFunction(path)\n\n                    if (detectedDependencies) {\n                        const body = isBlockStatement(arg.body)\n                            ? arg.body.body.find(statement => isReturnStatement(statement))?.argument\n                            : arg.body\n\n                        // Ensure the function body returns an object\n                        if (isObjectExpression(body)) {\n                            body.properties.forEach(property => {\n                                if (isObjectProperty(property) && isIdentifier(property.key) && detectedDependencies[property.key.name]) {\n                                    addDependencies(state, property.key.name, property, detectedDependencies[property.key.name])\n                                }\n                            })\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n", "import type { RemapConfig } from \"./types\"\n\nexport const REACT_NATIVE_COMPONENT_NAMES = [\n    'ActivityIndicator',\n    'View',\n    'Text',\n    'Image',\n    'ImageBackground',\n    'KeyboardAvoidingView',\n    'Pressable',\n    'ScrollView',\n    'FlatList',\n    'SectionList',\n    'Switch',\n    'TextInput',\n    'RefreshControl',\n    'TouchableHighlight',\n    'TouchableOpacity',\n    'VirtualizedList',\n    'Animated'\n    // Modal - there is no exposed native handle\n    // TouchableWithoutFeedback - can't accept a ref\n]\n\n/**\n * auto replace RN imports to Unistyles imports under these paths\n * our implementation simply borrows 'ref' to register it in ShadowRegistry\n * so we won't affect anyone's implementation\n */\nexport const REPLACE_WITH_UNISTYLES_PATHS = [\n    'react-native-reanimated/src/component',\n    'react-native-gesture-handler/src/components'\n]\n\n/**\n * this is more powerful API as it allows to convert unmatched imports to Unistyles\n */\nexport const REPLACE_WITH_UNISTYLES_EXOTIC_PATHS: Array<RemapConfig> = []\n\n/**\n * this list will additionally detect React Native direct imports\n */\nexport const NATIVE_COMPONENTS_PATHS: Pick<RemapConfig, 'imports'> = {\n    imports: [\n        {\n            name: 'NativeText',\n            isDefault: false,\n            path: 'react-native/Libraries/Text/TextNativeComponent',\n            mapTo: 'NativeText'\n        },\n        {\n            isDefault: true,\n            path: 'react-native/Libraries/Components/View/ViewNativeComponent',\n            mapTo: 'NativeView'\n        }\n    ]\n}\n", "import type { NodePath } from \"@babel/core\"\nimport { type ImportDeclaration, identifier, importDeclaration, importDefaultSpecifier, importSpecifier, isImportDefaultSpecifier, isImportSpecifier, stringLiteral } from \"@babel/types\"\nimport type { RemapConfig, UnistylesPluginPass } from \"./types\"\n\nexport function handleExoticImport(path: NodePath<ImportDeclaration>, state: UnistylesPluginPass, exoticImport: Pick<RemapConfig, 'imports'>) {\n    const specifiers = path.node.specifiers\n    const source = path.node.source\n\n    if (path.node.importKind !== 'value') {\n        return\n    }\n\n    specifiers.forEach(specifier => {\n        for (const rule of exoticImport.imports) {\n            const hasMatchingImportType = (!rule.isDefault && isImportSpecifier(specifier)) || (rule.isDefault && isImportDefaultSpecifier(specifier))\n            const hasMatchingImportName = rule.isDefault || (!rule.isDefault && rule.name === specifier.local.name)\n            const hasMatchingPath = rule.path === source.value\n\n            if (!hasMatchingImportType || !hasMatchingImportName || !hasMatchingPath) {\n                continue\n            }\n\n            if (isImportDefaultSpecifier(specifier)) {\n                // TODO\n                const newImport = importDeclaration(\n                    [importDefaultSpecifier(identifier(specifier.local.name))],\n                    stringLiteral(state.opts.isLocal && state.file.opts.filename\n                        ? state.file.opts.filename.split('react-native-unistyles').at(0)?.concat(`react-native-unistyles/components/native/${rule.mapTo}`) ?? ''\n                        : `react-native-unistyles/components/native/${rule.mapTo}`\n                    )\n                ) as any\n\n                path.replaceWith(newImport)\n            } else {\n                // TODO\n                const newImport = importDeclaration(\n                    [importSpecifier(identifier(rule.mapTo), identifier(rule.mapTo))],\n                    stringLiteral(state.opts.isLocal && state.file.opts.filename\n                        ? state.file.opts.filename.split('react-native-unistyles').at(0)?.concat(`react-native-unistyles/components/native/${rule.mapTo}`) ?? ''\n                        : `react-native-unistyles/components/native/${rule.mapTo}`\n                    )\n                ) as any\n\n                path.node.specifiers = specifiers.filter(s => s !== specifier)\n\n                if (path.node.specifiers.length === 0) {\n                    path.replaceWith(newImport)\n                } else {\n                    path.insertBefore(newImport)\n                }\n            }\n\n            return\n        }\n    })\n}\n", "import type { NodePath } from \"@babel/core\"\nimport { type ImportDeclaration, type Program, identifier, importDeclaration, importSpecifier, isImportDeclaration, stringLiteral } from \"@babel/types\"\nimport type { UnistylesPluginPass } from \"./types\"\n\nexport function addUnistylesImport(path: NodePath<Program>, state: UnistylesPluginPass) {\n    const localNames = Object.keys(state.reactNativeImports)\n    const names = Object.values(state.reactNativeImports)\n    const pairs = Object.entries(state.reactNativeImports)\n    const nodesToRemove: Array<ImportDeclaration> = []\n\n    // remove rn-imports\n    path.node.body.forEach(node => {\n        // user might have multiple imports like import type, import\n        if (isImportDeclaration(node) && node.source.value === 'react-native') {\n            node.specifiers = node.specifiers.filter(specifier => !localNames.some(name => name === specifier.local.name))\n\n            if (node.specifiers.length === 0) {\n                nodesToRemove.push(node)\n            }\n        }\n    })\n\n    // remove RNWeb imports\n    names.forEach(name => {\n        const rnWebImport = path.node.body.find((node): node is ImportDeclaration => isImportDeclaration(node) && node.source.value === `react-native-web/dist/exports/${name}`)\n\n        if (rnWebImport) {\n            rnWebImport.specifiers = []\n        }\n    })\n\n    // import components from react-native-unistyles\n    pairs.forEach(([localName, name]) => {\n        const newImport = importDeclaration(\n            [importSpecifier(identifier(localName), identifier(name))],\n            stringLiteral(state.opts.isLocal\n                ? state.file.opts.filename?.split('react-native-unistyles').at(0)?.concat(`react-native-unistyles/components/native/${name}`) ?? ''\n                : `react-native-unistyles/components/native/${name}`\n            )\n        )\n\n        path.node.body.unshift(newImport)\n    })\n\n    // cleanup\n    nodesToRemove.forEach(node => path.node.body.splice(path.node.body.indexOf(node), 1))\n}\n\nexport function isInsideNodeModules(state: UnistylesPluginPass) {\n    return state.file.opts.filename?.includes('node_modules')\n}\n", "import type { NodePath } from \"@babel/core\";\nimport { type JSXElement, isJSXAttribute, isJSXIdentifier, isStringLiteral } from \"@babel/types\";\n\nexport function hasStringRef(path: NodePath<JSXElement>) {\n    return path.node.openingElement.attributes.find(attr =>\n        isJSXAttribute(attr) &&\n        isJSXIdentifier(attr.name, { name: 'ref' }) &&\n        isStringLiteral(attr.value)\n    )\n}\n", "import type { UnistylesPluginPass } from './types'\nimport type { NodePath } from '@babel/core'\nimport { arrayExpression, identifier, isArrowFunctionExpression, isBlockStatement, isFunctionExpression, isIdentifier, isIfStatement, isMemberExpression, isObjectExpression, isObjectPattern, isObjectProperty, isReturnStatement, numericLiteral, objectExpression, type ObjectProperty, objectProperty, spreadElement, type CallExpression, type ArrowFunctionExpression, type FunctionExpression, type RestElement, MemberExpression } from '@babel/types'\n\nconst UnistyleDependency = {\n    Theme: 0,\n    ThemeName: 1,\n    AdaptiveThemes: 2,\n    Breakpoints: 3,\n    Variants: 4,\n    ColorScheme: 5,\n    Dimensions: 6,\n    Orientation: 7,\n    ContentSizeCategory: 8,\n    Insets: 9,\n    PixelRatio: 10,\n    FontScale: 11,\n    StatusBar: 12,\n    NavigationBar: 13,\n    Ime: 14\n}\n\nexport function stringToUniqueId(str: string) {\n    let hash = 0\n\n    for (let i = 0; i < str.length; i++) {\n        hash = (hash << 5) - hash + str.charCodeAt(i)\n        hash |= 0\n    }\n\n    const absHash = Math.abs(hash)\n\n    return absHash % 1000000000\n}\n\nexport function isUnistylesStyleSheet(path: NodePath<CallExpression>, state: UnistylesPluginPass) {\n    const { callee } = path.node\n\n    if (isMemberExpression(callee) && isIdentifier(callee.property)) {\n        return (\n            callee.property.name === 'create' &&\n            isIdentifier(callee.object) &&\n            callee.object.name === state.file.styleSheetLocalName\n        )\n    }\n\n    return false\n}\n\nexport function isKindOfStyleSheet(path: NodePath<CallExpression>, state: UnistylesPluginPass) {\n    if (!state.file.forceProcessing && !state.file.hasUnistylesImport) {\n        return false\n    }\n\n    const { callee } = path.node // Directly access callee\n\n    return (\n        isMemberExpression(callee) &&\n        isIdentifier(callee.property) &&\n        callee.property.name === 'create' &&\n        isIdentifier(callee.object)\n    )\n}\n\nexport function addStyleSheetTag(path: NodePath<CallExpression>, state: UnistylesPluginPass) {\n    const str = state.filename?.replace(state.cwd, '') ?? ''\n    const uniqueId = stringToUniqueId(str) + ++state.file.tagNumber\n\n    path.node.arguments.push(numericLiteral(uniqueId))\n}\n\nfunction getProperty(property: any) {\n    if (!property) {\n        return undefined\n    }\n\n    if (isIdentifier(property)) {\n        return {\n            properties: [property.name]\n        }\n    }\n\n    if (isObjectPattern(property)) {\n        const matchingProperties = property.properties.flatMap(p => getProperty(p))\n\n        return {\n            properties: matchingProperties.flatMap(properties => properties.properties)\n        }\n    }\n\n    if (isObjectProperty(property) && isIdentifier(property.value)) {\n        return {\n            properties: [property.key.name]\n        }\n    }\n\n    if (isObjectProperty(property) && isObjectPattern(property.value)) {\n        const matchingProperties = property.value.properties.flatMap(p => getProperty(p))\n\n        return {\n            parent: property.key.name,\n            properties: matchingProperties.flatMap(properties => properties.properties)\n        }\n    }\n\n    return undefined\n}\n\nexport function getStylesDependenciesFromObject(path: NodePath<CallExpression>) {\n    const detectedStylesWithVariants = new Set<{ label: string; key: string }>()\n    const stylesheet = path.node.arguments[0]\n\n    if (isObjectExpression(stylesheet)) {\n        stylesheet.properties.forEach(property => {\n            if (!isObjectProperty(property) || !isIdentifier(property.key)) {\n                return\n            }\n\n            if (isObjectProperty(property)) {\n                if (isObjectExpression(property.value)) {\n                    property.value.properties.forEach(innerProp => {\n                        if (isObjectProperty(innerProp) && isIdentifier(innerProp.key) && isIdentifier(property.key) && innerProp.key.name === 'variants') {\n                            detectedStylesWithVariants.add({\n                                label: 'variants',\n                                key: property.key.name\n                            })\n                        }\n                    })\n                }\n            }\n\n            if (isArrowFunctionExpression(property.value)) {\n                if (isObjectExpression(property.value.body)) {\n                    property.value.body.properties.forEach(innerProp => {\n                        if (isObjectProperty(innerProp) && isIdentifier(innerProp.key) && isIdentifier(property.key) && innerProp.key.name === 'variants') {\n                            detectedStylesWithVariants.add({\n                                label: 'variants',\n                                key: property.key.name\n                            })\n                        }\n                    })\n\n                }\n            }\n        })\n    }\n\n    const variants = Array.from(detectedStylesWithVariants)\n\n    return variants.reduce<Record<string, string[]>>((acc, { key, label }) => {\n        if (acc[key]) {\n            acc[key] = [\n                ...acc[key],\n                label\n            ]\n\n            // return {\n            //     ...acc,\n            //     [key]: [\n            //         ...acc[key],\n            //         label\n            //     ]\n            // }\n\n            return acc;\n        }\n\n        // return {\n        //     ...acc,\n        //     [key]: [label]\n        // }\n\n        acc[key] = [label]\n\n        return acc;\n    }, {})\n}\n\nexport function getStylesDependenciesFromFunction(path: NodePath<CallExpression>) {\n    const funcPath = path.get('arguments.0') as unknown as NodePath<ArrowFunctionExpression | FunctionExpression>\n\n    if (!funcPath) {\n        return\n    }\n\n    const params = funcPath.node.params\n    const [themeParam, rtParam] = params\n\n    const themeNames = []\n\n    // destructured theme object\n    if (themeParam && themeParam.type === 'ObjectPattern') {\n        // If destructured, collect all property names\n        for (const prop of themeParam.properties) {\n            themeNames.push(getProperty(prop))\n        }\n    }\n\n    // user used 'theme' without destructuring\n    if (themeParam && themeParam.type === 'Identifier') {\n        themeNames.push({\n            properties: [themeParam.name]\n        })\n    }\n\n    const rtNames = []\n\n    // destructured rt object\n    if (rtParam && rtParam.type === 'ObjectPattern') {\n        // If destructured, collect all property names\n        for (const prop of rtParam.properties) {\n            rtNames.push(getProperty(prop))\n        }\n    }\n\n    // user used 'rt' without destructuring\n    if (rtParam && rtParam.type === 'Identifier') {\n        rtNames.push({\n            properties: [rtParam.name]\n        })\n    }\n\n    // get returned object or return statement from StyleSheet.create function\n    let returnedObjectPath: NodePath | NodePath[] | null = null\n\n    if (funcPath.get('body').isObjectExpression()) {\n        returnedObjectPath = funcPath.get('body')\n    } else {\n        funcPath.traverse({\n            ReturnStatement(retPath) {\n                if (!returnedObjectPath && retPath.get('argument').isObjectExpression()) {\n                    returnedObjectPath = retPath.get('argument')\n                }\n            }\n        })\n    }\n\n    if (!returnedObjectPath) {\n        // there is no returned object\n        // abort\n\n        return\n    }\n\n    const detectedStylesWithVariants = new Set<{ label: 'variants'; key: string }>()\n\n    // detect variants via Scope\n    returnedObjectPath.get('properties').forEach(propPath => {\n        // get style name\n        const stylePath = propPath.get('key')\n\n        if (!stylePath.isIdentifier()) {\n            return\n        }\n\n        const styleKey = stylePath.node.name\n\n        const valuePath = propPath.get('value')\n\n        if (valuePath.isObjectExpression()) {\n            const hasVariants = valuePath.get('properties').some(innerProp => {\n                const innerKey = innerProp.get('key')\n\n                return innerKey.isIdentifier() && innerKey.node.name === 'variants'\n            })\n\n            if (hasVariants) {\n                detectedStylesWithVariants.add({\n                    label: 'variants',\n                    key: styleKey\n                })\n            }\n        }\n\n        if (valuePath.isArrowFunctionExpression()) {\n            if (isObjectExpression(valuePath.node.body)) {\n                const hasVariants = valuePath.node.body.properties.some(innerProp => {\n                    return isIdentifier(innerProp.key) && innerProp.key.name === 'variants'\n                })\n\n                if (hasVariants) {\n                    detectedStylesWithVariants.add({\n                        label: 'variants',\n                        key: styleKey\n                    })\n                }\n            }\n        }\n    })\n\n    const detectedStylesWithTheme = new Set<{ label: 'theme'; key: string }>()\n\n    // detect theme dependencies via Scope\n    themeNames.forEach(({ properties }) => {\n        properties.forEach(property => {\n            const binding = funcPath.scope.getBinding(property)\n\n            if (!binding) {\n                return\n            }\n\n            binding.referencePaths.forEach(refPath => {\n                // find key of the style that we are referring to\n                const containerProp = refPath\n                    .findParent(parent => parent.isObjectProperty() && parent.parentPath === returnedObjectPath)\n\n                if (!containerProp) {\n                    return\n                }\n\n                const keyNode = containerProp.get('key')\n                const styleKey = keyNode.isIdentifier()\n                    ? keyNode.node.name\n                    : keyNode.isLiteral()\n                        ? keyNode.node.value\n                        : null\n\n                if (styleKey) {\n                    detectedStylesWithTheme.add({\n                        label: 'theme',\n                        key: styleKey\n                    })\n                }\n            })\n        })\n    })\n\n    const detectedStylesWithRt = new Set()\n    const localRtName = isIdentifier(rtParam)\n        ? rtParam.name\n        : undefined\n\n    // detect rt dependencies via Scope\n    rtNames.forEach(({ properties, parent }) => {\n        properties.forEach(property => {\n            const rtBinding = funcPath.scope.getBinding(property)\n\n            if (!rtBinding) {\n                return\n            }\n\n            const isValidDependency = Boolean(toUnistylesDependency(property))\n\n            let validRtName = property\n\n            // user used nested destructing, find out parent key\n            if (!isValidDependency && (!localRtName || (localRtName && localRtName !== property))) {\n                if (!parent) {\n                    return\n                }\n\n                if (!toUnistylesDependency(parent)) {\n                    return\n                }\n\n                validRtName = parent\n            }\n\n            rtBinding.referencePaths.forEach(refPath => {\n                // to detect rt dependencies we need to get parameter not rt itself\n                // eg. rt.screen.width -> screen\n                // rt.insets.top -> insets\n                // special case: rt.insets.ime -> ime\n\n                let usedLabel = validRtName\n\n                if (refPath.parentPath?.isMemberExpression() && refPath.parentPath.get('object') === refPath) {\n                    const memberExpr = refPath.parentPath\n                    const propPath = memberExpr.get('property')\n\n                    if (propPath.isIdentifier()) {\n                        if (localRtName) {\n                            usedLabel = propPath.node.name\n                        }\n\n                        if (\n                            usedLabel === 'insets' &&\n                            memberExpr.parentPath.isMemberExpression() &&\n                            memberExpr.parentPath.get('object') === memberExpr\n                        ) {\n                            const secondPropPath = memberExpr.parentPath.get('property')\n\n                            if (secondPropPath.isIdentifier() && secondPropPath.node.name === 'ime') {\n                                usedLabel = 'ime'\n                            }\n                        }\n                    }\n                }\n\n                // find key of the style that we are referring to\n                const containerProp = refPath\n                    .findParent(parent => parent.isObjectProperty() && parent.parentPath === returnedObjectPath)\n\n                if (!containerProp) {\n                    return\n                }\n\n                const keyNode = containerProp.get('key')\n                const styleKey = keyNode.isIdentifier()\n                    ? keyNode.node.name\n                    : keyNode.isLiteral()\n                        ? keyNode.node.value\n                        : null\n\n                if (styleKey) {\n                    detectedStylesWithRt.add({\n                        label: usedLabel,\n                        key: styleKey\n                    })\n                }\n            })\n        })\n    })\n\n    const variants = Array.from(detectedStylesWithVariants)\n    const theme = Array.from(detectedStylesWithTheme)\n    const rt = Array.from(detectedStylesWithRt)\n\n    return theme\n        .concat(rt)\n        .concat(variants)\n        .reduce((acc, { key, label }) => {\n            if (acc[key]) {\n                // return {\n                //     ...acc,\n                //     [key]: [\n                //         ...acc[key],\n                //         label\n                //     ]\n                // }\n\n                acc[key] = [\n                    ...acc[key],\n                    label\n                ]\n\n                return acc\n            }\n\n            // return {\n            //     ...acc,\n            //     [key]: [label]\n            // }\n\n            acc[key] = [label]\n\n            return acc\n        }, [])\n}\n\nexport function toUnistylesDependency(dependency: string) {\n    switch (dependency) {\n        case 'theme': {\n            return UnistyleDependency.Theme\n        }\n        case 'themeName': {\n            return UnistyleDependency.ThemeName\n        }\n        case 'adaptiveThemes': {\n            return UnistyleDependency.AdaptiveThemes\n        }\n        case 'breakpoint': {\n            return UnistyleDependency.Breakpoints\n        }\n        case 'colorScheme': {\n            return UnistyleDependency.ColorScheme\n        }\n        case 'screen': {\n            return UnistyleDependency.Dimensions\n        }\n        case 'isPortrait':\n        case 'isLandscape': {\n            return UnistyleDependency.Orientation\n        }\n        case 'contentSizeCategory': {\n            return UnistyleDependency.ContentSizeCategory\n        }\n        case 'ime': {\n            return UnistyleDependency.Ime\n        }\n        case 'insets': {\n            return UnistyleDependency.Insets\n        }\n        case 'pixelRatio': {\n            return UnistyleDependency.PixelRatio\n        }\n        case 'fontScale': {\n            return UnistyleDependency.FontScale\n        }\n        case 'statusBar': {\n            return UnistyleDependency.StatusBar\n        }\n        case 'navigationBar': {\n            return UnistyleDependency.NavigationBar\n        }\n        case 'variants': {\n            return UnistyleDependency.Variants\n        }\n\n        // breakpoints are too complex and are handled by C++\n    }\n}\n\n// TODO BlockStatement\nexport function getReturnStatementsFromBody(node: any, results: any = []) {\n    if (isReturnStatement(node)) {\n        results.push(node)\n    }\n\n    if (isBlockStatement(node)) {\n        node.body.forEach(child => {\n            if (isBlockStatement(child)) {\n                getReturnStatementsFromBody(child, results)\n            }\n        })\n    }\n\n    if (isIfStatement(node)) {\n        getReturnStatementsFromBody(node.consequent, results)\n\n        if (node.alternate) {\n            getReturnStatementsFromBody(node.alternate, results)\n        }\n    }\n\n    return results\n}\n\nexport function addDependencies(state: UnistylesPluginPass, styleName: string, unistyle: ObjectProperty, detectedDependencies: string[]) {\n    const debugMessage = (deps: (number | undefined)[]) => {\n        if (state.opts.debug) {\n            const mappedDeps = deps\n                .map(dep => Object.keys(UnistyleDependency).find(key => UnistyleDependency[key] === dep))\n                .join(', ')\n\n            console.log(`${state.filename?.replace(`${state.file.opts.root}/`, '')}: styles.${styleName}: [${mappedDeps}]`)\n        }\n    }\n\n    const styleDependencies = detectedDependencies.map(toUnistylesDependency)\n\n    // add metadata about dependencies\n    if (styleDependencies.length > 0) {\n        const uniqueDependencies = Array.from(new Set(styleDependencies))\n\n        debugMessage(uniqueDependencies)\n\n        let targets = []\n\n        if (isArrowFunctionExpression(unistyle.value) || isFunctionExpression(unistyle.value)) {\n            if (isObjectExpression(unistyle.value.body)) {\n                targets.push(unistyle.value.body)\n            }\n\n            if (isBlockStatement(unistyle.value.body)) {\n                targets = getReturnStatementsFromBody(unistyle.value.body)\n                    .map(node => {\n                        if (isIdentifier(node.argument)) {\n                            node.argument = objectExpression([\n                                spreadElement(node.argument)\n                            ])\n                        }\n\n                        return node.argument\n                    })\n            }\n        }\n\n        if (isObjectExpression(unistyle.value)) {\n            targets.push(unistyle.value)\n        }\n\n        if (isMemberExpression(unistyle.value)) {\n            // convert to object\n            unistyle.value = objectExpression([spreadElement(unistyle.value)])\n\n            targets.push(unistyle.value)\n        }\n\n        if (targets.length > 0) {\n            targets.forEach(target => {\n                target.properties.push(\n                    objectProperty(\n                        identifier('uni__dependencies'),\n                        arrayExpression(uniqueDependencies.map(dep => numericLiteral(dep)))\n                    )\n                )\n            })\n        }\n    }\n}\n", "import type { NodePath } from \"@babel/core\"\nimport { type BlockStatement, type ExpressionStatement, blockStatement, callExpression, identifier, isCallExpression, isExpressionStatement, isIdentifier, isMemberExpression, memberExpression, variableDeclaration, variableDeclarator } from \"@babel/types\"\nimport type { UnistylesPluginPass } from \"./types\"\n\nexport function extractVariants(path: NodePath<BlockStatement>, state: UnistylesPluginPass) {\n    const maybeVariants = path.node.body.filter(node => (\n        isExpressionStatement(node) &&\n        isCallExpression(node.expression) &&\n        isMemberExpression(node.expression.callee)\n    ))\n\n    if (maybeVariants.length === 0) {\n        return\n    }\n\n    const targetVariant = maybeVariants.find((variant): variant is ExpressionStatement => {\n        // TODO: check against tests\n        if (!isExpressionStatement(variant) || !isCallExpression(variant.expression) || !isMemberExpression(variant.expression.callee) || !isIdentifier(variant.expression.callee.object)) {\n            return false\n        }\n\n        const calleeName = variant.expression.callee.object.name\n\n        return (\n            isIdentifier(variant.expression.callee.object, { name: calleeName }) &&\n            isIdentifier(variant.expression.callee.property, { name: 'useVariants' }) &&\n            variant.expression.arguments.length === 1\n        )\n    })\n\n    if (!targetVariant) {\n        return\n    }\n\n    const node = targetVariant.expression;\n    if (!isCallExpression(node)) {\n        return;\n    }\n\n    const callee = node.callee;\n    if (!isMemberExpression(callee) || !isIdentifier(callee.object)) {\n        return;\n    }\n\n    const calleeName = callee.object.name;\n    const newUniqueName = path.scope.generateUidIdentifier(calleeName)\n\n    // Create shadow declaration eg. const _styles = styles\n    const shadowDeclaration = variableDeclaration('const', [\n        variableDeclarator(newUniqueName, identifier(calleeName))\n    ])\n\n    // Create the new call expression eg. const styles = _styles.useVariants(...)\n    const newCallExpression = callExpression(\n        memberExpression(identifier(newUniqueName.name), identifier('useVariants')),\n        node.arguments\n    )\n    const finalDeclaration = variableDeclaration('const', [\n        variableDeclarator(identifier(calleeName), newCallExpression)\n    ])\n\n    // Find the current node's index, we will move everything after to new block\n    const pathIndex = path.node.body\n        .findIndex(bodyPath => bodyPath === targetVariant)\n    const rest = path.node.body.slice(pathIndex + 1)\n\n    // move rest to new block (scope)\n    const statement = blockStatement([\n        finalDeclaration,\n        ...rest\n    ])\n\n    path.node.body = [\n        ...path.node.body.slice(0, pathIndex),\n        shadowDeclaration,\n        statement\n    ]\n\n    state.file.hasVariants = true\n}\n"],
  "mappings": "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",
  "names": ["index_exports", "__export", "index_default", "__toCommonJS", "import_types", "REACT_NATIVE_COMPONENT_NAMES", "REPLACE_WITH_UNISTYLES_PATHS", "REPLACE_WITH_UNISTYLES_EXOTIC_PATHS", "NATIVE_COMPONENTS_PATHS", "import_types", "handleExoticImport", "path", "state", "exoticImport", "specifiers", "source", "specifier", "rule", "hasMatchingImportType", "hasMatchingImportName", "hasMatchingPath", "newImport", "s", "import_types", "addUnistylesImport", "path", "state", "localNames", "names", "pairs", "nodesToRemove", "node", "specifier", "name", "rnWebImport", "localName", "newImport", "isInsideNodeModules", "import_types", "hasStringRef", "path", "attr", "import_types", "UnistyleDependency", "stringToUniqueId", "str", "hash", "i", "isUnistylesStyleSheet", "path", "state", "callee", "isKindOfStyleSheet", "addStyleSheetTag", "uniqueId", "getProperty", "property", "p", "properties", "matchingProperties", "getStylesDependenciesFromObject", "detectedStylesWithVariants", "stylesheet", "innerProp", "acc", "key", "label", "getStylesDependenciesFromFunction", "funcPath", "params", "themeParam", "rtParam", "themeNames", "prop", "rtNames", "returnedObjectPath", "retPath", "propPath", "stylePath", "styleKey", "valuePath", "innerKey", "detectedStylesWithTheme", "binding", "refPath", "containerProp", "parent", "keyNode", "detectedStylesWithRt", "localRtName", "rtBinding", "isValidDependency", "toUnistylesDependency", "validRtName", "usedLabel", "memberExpr", "secondPropPath", "variants", "theme", "rt", "dependency", "getReturnStatementsFromBody", "node", "results", "child", "addDependencies", "styleName", "unistyle", "detectedDependencies", "debugMessage", "deps", "mappedDeps", "dep", "styleDependencies", "uniqueDependencies", "targets", "target", "import_types", "extractVariants", "path", "state", "maybeVariants", "node", "targetVariant", "variant", "calleeName", "callee", "newUniqueName", "shadowDeclaration", "newCallExpression", "finalDeclaration", "pathIndex", "bodyPath", "rest", "statement", "index_default", "_", "state", "REPLACE_WITH_UNISTYLES_PATHS", "path", "isInsideNodeModules", "addUnistylesImport", "declaration", "exoticImport", "REPLACE_WITH_UNISTYLES_EXOTIC_PATHS", "exotic", "handleExoticImport", "importSource", "specifier", "REACT_NATIVE_COMPONENT_NAMES", "NATIVE_COMPONENTS_PATHS", "hasStringRef", "extractVariants", "isUnistylesStyleSheet", "isKindOfStyleSheet", "addStyleSheetTag", "arg", "detectedDependencies", "getStylesDependenciesFromObject", "property", "addDependencies", "getStylesDependenciesFromFunction", "body", "statement"]
}
